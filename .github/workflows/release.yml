name: Build and Release EasyBite
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: EasyBite
            package: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: easybite.exe
            package: none
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: EasyBite
            package: tar.gz

    steps:
      - name: 🧾 Checkout source
        uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 🛠️ Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev gcc fontconfig libfontconfig1-dev

      - name: 🛠️ Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config openssl

      - name: 🔍 Locate all `Pid` definitions
        run: |
          echo "Searching for duplicate Pid definitions..."
          grep -R "struct Pid" -n src || true
          grep -R "enum Pid"   -n src || true
          grep -R "type Pid"   -n src || true
          grep -R "mod pid"    -n src || true

      - name: 📦 Run Cargo Check
        run: |
          cargo check --target ${{ matrix.target }} || {
            echo "Cargo check failed, check logs above for details"
            exit 1
          }

      - name: 📦 Build Release Binary (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          cargo clean
          cargo build --release --target ${{ matrix.target }} --verbose || exit 1

      - name: 📦 Build Release Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo clean
          cargo build --release --target ${{ matrix.target }} --verbose || exit 1

      - name: List Build Output
        run: |
          echo "Listing contents of build output:"  
          ls -la ./target/${{ matrix.target }}/release/

      - name: 🧪 Test Binary
        run: |
          bin="./target/${{ matrix.target }}/release/${{ matrix.artifact }}"
          if [ -f "$bin" ]; then
            echo "Running tests on $bin" 
            $bin config
            $bin search --offline
          else
            echo "Binary not found, skipping tests"
          fi
        shell: bash
        env:
          EASYBITE_MODULES: ./test-modules

      - name: 📦 Package (Linux/macOS)
        if: matrix.package == 'tar.gz'
        run: |
          artefact="easybite-v0.3.0-${{ matrix.target }}.${{ matrix.package }}"
          if [ -f "./target/${{ matrix.target }}/release/${{ matrix.artifact }}" ]; then
            tar -C target/${{ matrix.target }}/release -czf $artefact ${{ matrix.artifact }}
          fi

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: easybite-${{ matrix.target }}
          path: |
            ${{ matrix.package == 'tar.gz' && format('easybite-v0.3.0-{}.{}', matrix.target, matrix.package) || format('./target/{}/release/{}', matrix.target, matrix.artifact) }}

      - name: 🚀 Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.upload-artifact.outputs.artifact-paths }}
          body: |
            EasyBite v0.3.0 for ${{ matrix.target }}.
            Install instructions:
            ${{ matrix.os == 'windows-latest' && '```powershell' || '```bash' }}
            ${{ matrix.package == 'tar.gz' && format('curl -L https://github.com/Dangujba/EasyBite/releases/download/v0.3.0/easybite-v0.3.0-{}.{} | tar -xz -C /usr/local/bin', matrix.target, matrix.package) || '(Copy the binary from the release folder and add it to your PATH)' }}
            ${{ matrix.os == 'windows-latest' && '$env:Path += ";$env:LOCALAPPDATA\\Programs\\EasyBite"' || '' }}
            ${{ matrix.os == 'windows-latest' && '[Environment]::SetEnvironmentVariable("Path", $env:Path, [EnvironmentVariableTarget]::User)' || '' }}
