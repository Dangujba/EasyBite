/****************************************************************************************
 * File: token.rs
 * Author: Muhammad Baba Goni
 * Email: <muhammadgoni51@gmail.com>
 * Date:  02/03/2025
 *
 * Description:
 * ------------
 * This file defines the core `Token` structure and related enumerations used by the
 * lexer (lexical analyzer) and parser modules.
 *
 * The `Token` represents the smallest units of meaning (keywords, identifiers,
 * operators, literals, etc.) found in the source code.
 *
 * Responsibilities:
 * -----------------
 * - Define all possible token types through an enum (`TokenType`).
 * - Structure a `Token` to hold its type, literal value, and optionally positional
 *   information (e.g., line number, column).
 *
 * Usage:
 * ------
 * Tokens are generated by the `lexer` module and consumed by the `parser` to build
 * the Abstract Syntax Tree (AST).
 *
 * License:
 * --------
 * MIT License or similar permissive licensing.
 ****************************************************************************************/

use std::fmt;
#[derive(Debug, Clone, PartialEq)]
pub enum TokenType {
    // Keywords

    Declare,
    Set,
    To,
    Show,
    ShowLine,
    Null,
    Input,
    Generate,
    Stop,
    Exit,
    Skip,
    Import,
    Is,
    As,
    Inc,
    Dec,
    New,
    Parent,
    Await,
    Async,
    Error,
    Raise,
    ByteArray,
    Callback,

    // Control Flow
    If,
    Then,
    Else,
    ElseIf,
    EndIf,
    Choose,
    When,
    Otherwise,
    EndChoose,
    Try,
    Capture,
    While,
    Repeat,
    Times,
    EndRepeat,
    Foreach,
    For,
    From,
    Step,
    By,
    EndFor,
    Iterate,
    In,
    Over,
    EndIterate,
    EndForeach,

    // Functions & Classes
    Function,
    Return,
    EndFunction,
    Class,
    Inherit,
    EndClass,
    Method,
    EndMethod,
    Constructor,
    EndInit,
    This,
    Private,
    Public,

    // Logical & Comparison Operators
    And,
    Or,
    Not,
    IsEqual,
    True,
    False,
    LessThan,
    LessThanEqual,
    GreaterThan,
    GreaterThanEqual,
    NotEqual,
    IsNot,
    IsIn,

    // Mathematical Operators
    Plus,
    Minus,
    Multiply,
    Divide,
    Modulus,
    Power,

    // Identifiers & Literals
    Identifier(String),
    Number(f64),
    StringLiteral(String),
    Hex(String),
    Bytes(Vec<u8>),
    Scientific(f64),

    // Symbols
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    Comma,
    Semicolon,
    Dot,
    Colon,

    // End of File
    EOF,
    Indent,
    Newline,
}

#[derive(Debug, Clone)]
pub struct Token {
    pub token_type: TokenType,
    pub value: String, // Renamed from `lexeme`
    pub line: usize,
    pub column: usize, // Added column tracking
}

impl Token {
    pub fn new(token_type: TokenType, value: String, line: usize, column: usize) -> Self {
        Token {
            token_type,
            value,
            line,
            column,
        }
    }
}

// Implement `to_string()` for formatted token output
impl fmt::Display for Token {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "Token({:?}, '{}', Line: {}, Column: {})",
            self.token_type,
            self.value,
            self.line,
            self.column
        )
    }
}
